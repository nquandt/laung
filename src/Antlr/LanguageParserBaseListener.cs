//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LanguageParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ILanguageParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class LanguageParserBaseListener : ILanguageParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.compilation_unit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompilation_unit([NotNull] LanguageParser.Compilation_unitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.compilation_unit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompilation_unit([NotNull] LanguageParser.Compilation_unitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.namespace_or_type_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNamespace_or_type_name([NotNull] LanguageParser.Namespace_or_type_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.namespace_or_type_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNamespace_or_type_name([NotNull] LanguageParser.Namespace_or_type_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType_([NotNull] LanguageParser.Type_Context context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType_([NotNull] LanguageParser.Type_Context context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.base_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBase_type([NotNull] LanguageParser.Base_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.base_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBase_type([NotNull] LanguageParser.Base_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.tuple_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTuple_type([NotNull] LanguageParser.Tuple_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.tuple_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTuple_type([NotNull] LanguageParser.Tuple_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.tuple_element"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTuple_element([NotNull] LanguageParser.Tuple_elementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.tuple_element"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTuple_element([NotNull] LanguageParser.Tuple_elementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.simple_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimple_type([NotNull] LanguageParser.Simple_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.simple_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimple_type([NotNull] LanguageParser.Simple_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.numeric_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumeric_type([NotNull] LanguageParser.Numeric_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.numeric_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumeric_type([NotNull] LanguageParser.Numeric_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.integral_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntegral_type([NotNull] LanguageParser.Integral_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.integral_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntegral_type([NotNull] LanguageParser.Integral_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.floating_point_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFloating_point_type([NotNull] LanguageParser.Floating_point_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.floating_point_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFloating_point_type([NotNull] LanguageParser.Floating_point_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.class_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterClass_type([NotNull] LanguageParser.Class_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.class_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitClass_type([NotNull] LanguageParser.Class_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_argument_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType_argument_list([NotNull] LanguageParser.Type_argument_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_argument_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType_argument_list([NotNull] LanguageParser.Type_argument_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.argument_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument_list([NotNull] LanguageParser.Argument_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.argument_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument_list([NotNull] LanguageParser.Argument_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument([NotNull] LanguageParser.ArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument([NotNull] LanguageParser.ArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] LanguageParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] LanguageParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.non_assignment_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNon_assignment_expression([NotNull] LanguageParser.Non_assignment_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.non_assignment_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNon_assignment_expression([NotNull] LanguageParser.Non_assignment_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] LanguageParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] LanguageParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.assignment_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment_operator([NotNull] LanguageParser.Assignment_operatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.assignment_operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment_operator([NotNull] LanguageParser.Assignment_operatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.conditional_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditional_expression([NotNull] LanguageParser.Conditional_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.conditional_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditional_expression([NotNull] LanguageParser.Conditional_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.null_coalescing_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNull_coalescing_expression([NotNull] LanguageParser.Null_coalescing_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.null_coalescing_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNull_coalescing_expression([NotNull] LanguageParser.Null_coalescing_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.conditional_or_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditional_or_expression([NotNull] LanguageParser.Conditional_or_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.conditional_or_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditional_or_expression([NotNull] LanguageParser.Conditional_or_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.conditional_and_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditional_and_expression([NotNull] LanguageParser.Conditional_and_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.conditional_and_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditional_and_expression([NotNull] LanguageParser.Conditional_and_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.inclusive_or_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInclusive_or_expression([NotNull] LanguageParser.Inclusive_or_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.inclusive_or_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInclusive_or_expression([NotNull] LanguageParser.Inclusive_or_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.exclusive_or_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExclusive_or_expression([NotNull] LanguageParser.Exclusive_or_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.exclusive_or_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExclusive_or_expression([NotNull] LanguageParser.Exclusive_or_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.and_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnd_expression([NotNull] LanguageParser.And_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.and_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnd_expression([NotNull] LanguageParser.And_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.equality_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquality_expression([NotNull] LanguageParser.Equality_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.equality_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquality_expression([NotNull] LanguageParser.Equality_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.relational_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelational_expression([NotNull] LanguageParser.Relational_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.relational_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelational_expression([NotNull] LanguageParser.Relational_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.shift_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterShift_expression([NotNull] LanguageParser.Shift_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.shift_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitShift_expression([NotNull] LanguageParser.Shift_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.additive_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditive_expression([NotNull] LanguageParser.Additive_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.additive_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditive_expression([NotNull] LanguageParser.Additive_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.multiplicative_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicative_expression([NotNull] LanguageParser.Multiplicative_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.multiplicative_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicative_expression([NotNull] LanguageParser.Multiplicative_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.switch_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSwitch_expression([NotNull] LanguageParser.Switch_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.switch_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSwitch_expression([NotNull] LanguageParser.Switch_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.range_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRange_expression([NotNull] LanguageParser.Range_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.range_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRange_expression([NotNull] LanguageParser.Range_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.unary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnary_expression([NotNull] LanguageParser.Unary_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.unary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnary_expression([NotNull] LanguageParser.Unary_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.cast_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCast_expression([NotNull] LanguageParser.Cast_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.cast_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCast_expression([NotNull] LanguageParser.Cast_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.primary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimary_expression([NotNull] LanguageParser.Primary_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.primary_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimary_expression([NotNull] LanguageParser.Primary_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpression([NotNull] LanguageParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpression([NotNull] LanguageParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>simpleNameExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleNameExpression([NotNull] LanguageParser.SimpleNameExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>simpleNameExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleNameExpression([NotNull] LanguageParser.SimpleNameExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExpressions</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesisExpressions([NotNull] LanguageParser.ParenthesisExpressionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExpressions</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesisExpressions([NotNull] LanguageParser.ParenthesisExpressionsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>memberAccessExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberAccessExpression([NotNull] LanguageParser.MemberAccessExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>memberAccessExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberAccessExpression([NotNull] LanguageParser.MemberAccessExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>literalAccessExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralAccessExpression([NotNull] LanguageParser.LiteralAccessExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>literalAccessExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralAccessExpression([NotNull] LanguageParser.LiteralAccessExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>thisReferenceExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThisReferenceExpression([NotNull] LanguageParser.ThisReferenceExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>thisReferenceExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThisReferenceExpression([NotNull] LanguageParser.ThisReferenceExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>objectCreationExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectCreationExpression([NotNull] LanguageParser.ObjectCreationExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>objectCreationExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectCreationExpression([NotNull] LanguageParser.ObjectCreationExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>tupleExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTupleExpression([NotNull] LanguageParser.TupleExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>tupleExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTupleExpression([NotNull] LanguageParser.TupleExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>typeofExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTypeofExpression([NotNull] LanguageParser.TypeofExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>typeofExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTypeofExpression([NotNull] LanguageParser.TypeofExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>anonymousMethodExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnonymousMethodExpression([NotNull] LanguageParser.AnonymousMethodExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>anonymousMethodExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnonymousMethodExpression([NotNull] LanguageParser.AnonymousMethodExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.throwable_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThrowable_expression([NotNull] LanguageParser.Throwable_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.throwable_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThrowable_expression([NotNull] LanguageParser.Throwable_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.throw_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThrow_expression([NotNull] LanguageParser.Throw_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.throw_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThrow_expression([NotNull] LanguageParser.Throw_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.member_access"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMember_access([NotNull] LanguageParser.Member_accessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.member_access"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMember_access([NotNull] LanguageParser.Member_accessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.bracket_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBracket_expression([NotNull] LanguageParser.Bracket_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.bracket_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBracket_expression([NotNull] LanguageParser.Bracket_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.indexer_argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndexer_argument([NotNull] LanguageParser.Indexer_argumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.indexer_argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndexer_argument([NotNull] LanguageParser.Indexer_argumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.predefined_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredefined_type([NotNull] LanguageParser.Predefined_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.predefined_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredefined_type([NotNull] LanguageParser.Predefined_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.expression_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression_list([NotNull] LanguageParser.Expression_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.expression_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression_list([NotNull] LanguageParser.Expression_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.object_or_collection_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObject_or_collection_initializer([NotNull] LanguageParser.Object_or_collection_initializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.object_or_collection_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObject_or_collection_initializer([NotNull] LanguageParser.Object_or_collection_initializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.object_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObject_initializer([NotNull] LanguageParser.Object_initializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.object_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObject_initializer([NotNull] LanguageParser.Object_initializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.member_initializer_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMember_initializer_list([NotNull] LanguageParser.Member_initializer_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.member_initializer_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMember_initializer_list([NotNull] LanguageParser.Member_initializer_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.member_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMember_initializer([NotNull] LanguageParser.Member_initializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.member_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMember_initializer([NotNull] LanguageParser.Member_initializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.initializer_value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInitializer_value([NotNull] LanguageParser.Initializer_valueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.initializer_value"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInitializer_value([NotNull] LanguageParser.Initializer_valueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.collection_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCollection_initializer([NotNull] LanguageParser.Collection_initializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.collection_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCollection_initializer([NotNull] LanguageParser.Collection_initializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.element_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElement_initializer([NotNull] LanguageParser.Element_initializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.element_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElement_initializer([NotNull] LanguageParser.Element_initializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.anonymous_object_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnonymous_object_initializer([NotNull] LanguageParser.Anonymous_object_initializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.anonymous_object_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnonymous_object_initializer([NotNull] LanguageParser.Anonymous_object_initializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.member_declarator_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMember_declarator_list([NotNull] LanguageParser.Member_declarator_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.member_declarator_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMember_declarator_list([NotNull] LanguageParser.Member_declarator_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.member_declarator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMember_declarator([NotNull] LanguageParser.Member_declaratorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.member_declarator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMember_declarator([NotNull] LanguageParser.Member_declaratorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.unbound_type_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnbound_type_name([NotNull] LanguageParser.Unbound_type_nameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.unbound_type_name"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnbound_type_name([NotNull] LanguageParser.Unbound_type_nameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.generic_dimension_specifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGeneric_dimension_specifier([NotNull] LanguageParser.Generic_dimension_specifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.generic_dimension_specifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGeneric_dimension_specifier([NotNull] LanguageParser.Generic_dimension_specifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.lambda_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambda_expression([NotNull] LanguageParser.Lambda_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.lambda_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambda_expression([NotNull] LanguageParser.Lambda_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.anonymous_function_signature"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnonymous_function_signature([NotNull] LanguageParser.Anonymous_function_signatureContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.anonymous_function_signature"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnonymous_function_signature([NotNull] LanguageParser.Anonymous_function_signatureContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.explicit_anonymous_function_parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExplicit_anonymous_function_parameter_list([NotNull] LanguageParser.Explicit_anonymous_function_parameter_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.explicit_anonymous_function_parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExplicit_anonymous_function_parameter_list([NotNull] LanguageParser.Explicit_anonymous_function_parameter_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.explicit_anonymous_function_parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExplicit_anonymous_function_parameter([NotNull] LanguageParser.Explicit_anonymous_function_parameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.explicit_anonymous_function_parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExplicit_anonymous_function_parameter([NotNull] LanguageParser.Explicit_anonymous_function_parameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.implicit_anonymous_function_parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterImplicit_anonymous_function_parameter_list([NotNull] LanguageParser.Implicit_anonymous_function_parameter_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.implicit_anonymous_function_parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitImplicit_anonymous_function_parameter_list([NotNull] LanguageParser.Implicit_anonymous_function_parameter_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.anonymous_function_body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnonymous_function_body([NotNull] LanguageParser.Anonymous_function_bodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.anonymous_function_body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnonymous_function_body([NotNull] LanguageParser.Anonymous_function_bodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] LanguageParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] LanguageParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.declarationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclarationStatement([NotNull] LanguageParser.DeclarationStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.declarationStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclarationStatement([NotNull] LanguageParser.DeclarationStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_function_declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLocal_function_declaration([NotNull] LanguageParser.Local_function_declarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_function_declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLocal_function_declaration([NotNull] LanguageParser.Local_function_declarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_function_modifiers"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLocal_function_modifiers([NotNull] LanguageParser.Local_function_modifiersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_function_modifiers"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLocal_function_modifiers([NotNull] LanguageParser.Local_function_modifiersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_function_body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLocal_function_body([NotNull] LanguageParser.Local_function_bodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_function_body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLocal_function_body([NotNull] LanguageParser.Local_function_bodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.labeled_Statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLabeled_Statement([NotNull] LanguageParser.Labeled_StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.labeled_Statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLabeled_Statement([NotNull] LanguageParser.Labeled_StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmbedded_statement([NotNull] LanguageParser.Embedded_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmbedded_statement([NotNull] LanguageParser.Embedded_statementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>theEmptyStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTheEmptyStatement([NotNull] LanguageParser.TheEmptyStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>theEmptyStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTheEmptyStatement([NotNull] LanguageParser.TheEmptyStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStatement([NotNull] LanguageParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStatement([NotNull] LanguageParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] LanguageParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] LanguageParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] LanguageParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] LanguageParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] LanguageParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] LanguageParser.ForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>foreachStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForeachStatement([NotNull] LanguageParser.ForeachStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>foreachStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForeachStatement([NotNull] LanguageParser.ForeachStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>breakStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBreakStatement([NotNull] LanguageParser.BreakStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>breakStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBreakStatement([NotNull] LanguageParser.BreakStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>continueStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterContinueStatement([NotNull] LanguageParser.ContinueStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>continueStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitContinueStatement([NotNull] LanguageParser.ContinueStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] LanguageParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] LanguageParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>throwStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterThrowStatement([NotNull] LanguageParser.ThrowStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>throwStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitThrowStatement([NotNull] LanguageParser.ThrowStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>tryStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTryStatement([NotNull] LanguageParser.TryStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>tryStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTryStatement([NotNull] LanguageParser.TryStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>usingStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUsingStatement([NotNull] LanguageParser.UsingStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>usingStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUsingStatement([NotNull] LanguageParser.UsingStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] LanguageParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] LanguageParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_variable_declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLocal_variable_declaration([NotNull] LanguageParser.Local_variable_declarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_variable_declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLocal_variable_declaration([NotNull] LanguageParser.Local_variable_declarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_variable_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLocal_variable_type([NotNull] LanguageParser.Local_variable_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_variable_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLocal_variable_type([NotNull] LanguageParser.Local_variable_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_variable_declarator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLocal_variable_declarator([NotNull] LanguageParser.Local_variable_declaratorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_variable_declarator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLocal_variable_declarator([NotNull] LanguageParser.Local_variable_declaratorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_variable_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLocal_variable_initializer([NotNull] LanguageParser.Local_variable_initializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_variable_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLocal_variable_initializer([NotNull] LanguageParser.Local_variable_initializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.if_body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIf_body([NotNull] LanguageParser.If_bodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.if_body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIf_body([NotNull] LanguageParser.If_bodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.statement_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement_list([NotNull] LanguageParser.Statement_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.statement_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement_list([NotNull] LanguageParser.Statement_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.for_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFor_initializer([NotNull] LanguageParser.For_initializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.for_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFor_initializer([NotNull] LanguageParser.For_initializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.for_iterator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFor_iterator([NotNull] LanguageParser.For_iteratorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.for_iterator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFor_iterator([NotNull] LanguageParser.For_iteratorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.catch_clauses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCatch_clauses([NotNull] LanguageParser.Catch_clausesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.catch_clauses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCatch_clauses([NotNull] LanguageParser.Catch_clausesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.specific_catch_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSpecific_catch_clause([NotNull] LanguageParser.Specific_catch_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.specific_catch_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSpecific_catch_clause([NotNull] LanguageParser.Specific_catch_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.general_catch_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGeneral_catch_clause([NotNull] LanguageParser.General_catch_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.general_catch_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGeneral_catch_clause([NotNull] LanguageParser.General_catch_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.finally_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFinally_clause([NotNull] LanguageParser.Finally_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.finally_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFinally_clause([NotNull] LanguageParser.Finally_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.resource_acquisition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterResource_acquisition([NotNull] LanguageParser.Resource_acquisitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.resource_acquisition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitResource_acquisition([NotNull] LanguageParser.Resource_acquisitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.using_directives"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUsing_directives([NotNull] LanguageParser.Using_directivesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.using_directives"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUsing_directives([NotNull] LanguageParser.Using_directivesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>usingAliasDirective</c>
	/// labeled alternative in <see cref="LanguageParser.using_directive"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUsingAliasDirective([NotNull] LanguageParser.UsingAliasDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>usingAliasDirective</c>
	/// labeled alternative in <see cref="LanguageParser.using_directive"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUsingAliasDirective([NotNull] LanguageParser.UsingAliasDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>usingNamespaceDirective</c>
	/// labeled alternative in <see cref="LanguageParser.using_directive"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUsingNamespaceDirective([NotNull] LanguageParser.UsingNamespaceDirectiveContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>usingNamespaceDirective</c>
	/// labeled alternative in <see cref="LanguageParser.using_directive"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUsingNamespaceDirective([NotNull] LanguageParser.UsingNamespaceDirectiveContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.qualified_alias_member"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQualified_alias_member([NotNull] LanguageParser.Qualified_alias_memberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.qualified_alias_member"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQualified_alias_member([NotNull] LanguageParser.Qualified_alias_memberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType_parameter_list([NotNull] LanguageParser.Type_parameter_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType_parameter_list([NotNull] LanguageParser.Type_parameter_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType_parameter([NotNull] LanguageParser.Type_parameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType_parameter([NotNull] LanguageParser.Type_parameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_parameter_constraints_clauses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType_parameter_constraints_clauses([NotNull] LanguageParser.Type_parameter_constraints_clausesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_parameter_constraints_clauses"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType_parameter_constraints_clauses([NotNull] LanguageParser.Type_parameter_constraints_clausesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_parameter_constraints_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType_parameter_constraints_clause([NotNull] LanguageParser.Type_parameter_constraints_clauseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_parameter_constraints_clause"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType_parameter_constraints_clause([NotNull] LanguageParser.Type_parameter_constraints_clauseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_parameter_constraints"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType_parameter_constraints([NotNull] LanguageParser.Type_parameter_constraintsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_parameter_constraints"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType_parameter_constraints([NotNull] LanguageParser.Type_parameter_constraintsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.primary_constraint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimary_constraint([NotNull] LanguageParser.Primary_constraintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.primary_constraint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimary_constraint([NotNull] LanguageParser.Primary_constraintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.secondary_constraints"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSecondary_constraints([NotNull] LanguageParser.Secondary_constraintsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.secondary_constraints"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSecondary_constraints([NotNull] LanguageParser.Secondary_constraintsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.constructor_constraint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstructor_constraint([NotNull] LanguageParser.Constructor_constraintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.constructor_constraint"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstructor_constraint([NotNull] LanguageParser.Constructor_constraintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.variable_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable_initializer([NotNull] LanguageParser.Variable_initializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.variable_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable_initializer([NotNull] LanguageParser.Variable_initializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.return_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturn_type([NotNull] LanguageParser.Return_typeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.return_type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturn_type([NotNull] LanguageParser.Return_typeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.formal_parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormal_parameter_list([NotNull] LanguageParser.Formal_parameter_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.formal_parameter_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormal_parameter_list([NotNull] LanguageParser.Formal_parameter_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.fixed_parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFixed_parameters([NotNull] LanguageParser.Fixed_parametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.fixed_parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFixed_parameters([NotNull] LanguageParser.Fixed_parametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.fixed_parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFixed_parameter([NotNull] LanguageParser.Fixed_parameterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.fixed_parameter"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFixed_parameter([NotNull] LanguageParser.Fixed_parameterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.rank_specifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRank_specifier([NotNull] LanguageParser.Rank_specifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.rank_specifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRank_specifier([NotNull] LanguageParser.Rank_specifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.array_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArray_initializer([NotNull] LanguageParser.Array_initializerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.array_initializer"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArray_initializer([NotNull] LanguageParser.Array_initializerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attributes"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAttributes([NotNull] LanguageParser.AttributesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attributes"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAttributes([NotNull] LanguageParser.AttributesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attribute_section"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAttribute_section([NotNull] LanguageParser.Attribute_sectionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attribute_section"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAttribute_section([NotNull] LanguageParser.Attribute_sectionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attribute_target"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAttribute_target([NotNull] LanguageParser.Attribute_targetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attribute_target"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAttribute_target([NotNull] LanguageParser.Attribute_targetContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attribute_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAttribute_list([NotNull] LanguageParser.Attribute_listContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attribute_list"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAttribute_list([NotNull] LanguageParser.Attribute_listContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attribute"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAttribute([NotNull] LanguageParser.AttributeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attribute"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAttribute([NotNull] LanguageParser.AttributeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attribute_argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAttribute_argument([NotNull] LanguageParser.Attribute_argumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attribute_argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAttribute_argument([NotNull] LanguageParser.Attribute_argumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.right_arrow"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRight_arrow([NotNull] LanguageParser.Right_arrowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.right_arrow"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRight_arrow([NotNull] LanguageParser.Right_arrowContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.right_shift"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRight_shift([NotNull] LanguageParser.Right_shiftContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.right_shift"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRight_shift([NotNull] LanguageParser.Right_shiftContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.right_shift_assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRight_shift_assignment([NotNull] LanguageParser.Right_shift_assignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.right_shift_assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRight_shift_assignment([NotNull] LanguageParser.Right_shift_assignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] LanguageParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] LanguageParser.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.boolean_literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBoolean_literal([NotNull] LanguageParser.Boolean_literalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.boolean_literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBoolean_literal([NotNull] LanguageParser.Boolean_literalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.string_literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterString_literal([NotNull] LanguageParser.String_literalContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.string_literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitString_literal([NotNull] LanguageParser.String_literalContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.interpolated_regular_string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInterpolated_regular_string([NotNull] LanguageParser.Interpolated_regular_stringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.interpolated_regular_string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInterpolated_regular_string([NotNull] LanguageParser.Interpolated_regular_stringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.interpolated_verbatium_string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInterpolated_verbatium_string([NotNull] LanguageParser.Interpolated_verbatium_stringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.interpolated_verbatium_string"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInterpolated_verbatium_string([NotNull] LanguageParser.Interpolated_verbatium_stringContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.interpolated_regular_string_part"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInterpolated_regular_string_part([NotNull] LanguageParser.Interpolated_regular_string_partContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.interpolated_regular_string_part"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInterpolated_regular_string_part([NotNull] LanguageParser.Interpolated_regular_string_partContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.interpolated_verbatium_string_part"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInterpolated_verbatium_string_part([NotNull] LanguageParser.Interpolated_verbatium_string_partContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.interpolated_verbatium_string_part"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInterpolated_verbatium_string_part([NotNull] LanguageParser.Interpolated_verbatium_string_partContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.interpolated_string_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInterpolated_string_expression([NotNull] LanguageParser.Interpolated_string_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.interpolated_string_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInterpolated_string_expression([NotNull] LanguageParser.Interpolated_string_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.keyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeyword([NotNull] LanguageParser.KeywordContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.keyword"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeyword([NotNull] LanguageParser.KeywordContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.arg_declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArg_declaration([NotNull] LanguageParser.Arg_declarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.arg_declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArg_declaration([NotNull] LanguageParser.Arg_declarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.method_invocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMethod_invocation([NotNull] LanguageParser.Method_invocationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.method_invocation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMethod_invocation([NotNull] LanguageParser.Method_invocationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.object_creation_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObject_creation_expression([NotNull] LanguageParser.Object_creation_expressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.object_creation_expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObject_creation_expression([NotNull] LanguageParser.Object_creation_expressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] LanguageParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] LanguageParser.IdentifierContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
