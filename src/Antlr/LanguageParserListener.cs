//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LanguageParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LanguageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public interface ILanguageParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.compilation_unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompilation_unit([NotNull] LanguageParser.Compilation_unitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.compilation_unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompilation_unit([NotNull] LanguageParser.Compilation_unitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.namespace_or_type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNamespace_or_type_name([NotNull] LanguageParser.Namespace_or_type_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.namespace_or_type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNamespace_or_type_name([NotNull] LanguageParser.Namespace_or_type_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_([NotNull] LanguageParser.Type_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_([NotNull] LanguageParser.Type_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.base_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBase_type([NotNull] LanguageParser.Base_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.base_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBase_type([NotNull] LanguageParser.Base_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.tuple_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTuple_type([NotNull] LanguageParser.Tuple_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.tuple_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTuple_type([NotNull] LanguageParser.Tuple_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.tuple_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTuple_element([NotNull] LanguageParser.Tuple_elementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.tuple_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTuple_element([NotNull] LanguageParser.Tuple_elementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.simple_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimple_type([NotNull] LanguageParser.Simple_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.simple_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimple_type([NotNull] LanguageParser.Simple_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.numeric_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumeric_type([NotNull] LanguageParser.Numeric_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.numeric_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumeric_type([NotNull] LanguageParser.Numeric_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.integral_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntegral_type([NotNull] LanguageParser.Integral_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.integral_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntegral_type([NotNull] LanguageParser.Integral_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.floating_point_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloating_point_type([NotNull] LanguageParser.Floating_point_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.floating_point_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloating_point_type([NotNull] LanguageParser.Floating_point_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.class_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_type([NotNull] LanguageParser.Class_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.class_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_type([NotNull] LanguageParser.Class_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_argument_list([NotNull] LanguageParser.Type_argument_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_argument_list([NotNull] LanguageParser.Type_argument_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument_list([NotNull] LanguageParser.Argument_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.argument_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument_list([NotNull] LanguageParser.Argument_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument([NotNull] LanguageParser.ArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument([NotNull] LanguageParser.ArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] LanguageParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] LanguageParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.non_assignment_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNon_assignment_expression([NotNull] LanguageParser.Non_assignment_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.non_assignment_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNon_assignment_expression([NotNull] LanguageParser.Non_assignment_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] LanguageParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] LanguageParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.assignment_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment_operator([NotNull] LanguageParser.Assignment_operatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.assignment_operator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment_operator([NotNull] LanguageParser.Assignment_operatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.conditional_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditional_expression([NotNull] LanguageParser.Conditional_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.conditional_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditional_expression([NotNull] LanguageParser.Conditional_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.null_coalescing_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNull_coalescing_expression([NotNull] LanguageParser.Null_coalescing_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.null_coalescing_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNull_coalescing_expression([NotNull] LanguageParser.Null_coalescing_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.conditional_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditional_or_expression([NotNull] LanguageParser.Conditional_or_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.conditional_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditional_or_expression([NotNull] LanguageParser.Conditional_or_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.conditional_and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditional_and_expression([NotNull] LanguageParser.Conditional_and_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.conditional_and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditional_and_expression([NotNull] LanguageParser.Conditional_and_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.inclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInclusive_or_expression([NotNull] LanguageParser.Inclusive_or_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.inclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInclusive_or_expression([NotNull] LanguageParser.Inclusive_or_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.exclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExclusive_or_expression([NotNull] LanguageParser.Exclusive_or_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.exclusive_or_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExclusive_or_expression([NotNull] LanguageParser.Exclusive_or_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnd_expression([NotNull] LanguageParser.And_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.and_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnd_expression([NotNull] LanguageParser.And_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.equality_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquality_expression([NotNull] LanguageParser.Equality_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.equality_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquality_expression([NotNull] LanguageParser.Equality_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.relational_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelational_expression([NotNull] LanguageParser.Relational_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.relational_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelational_expression([NotNull] LanguageParser.Relational_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.shift_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterShift_expression([NotNull] LanguageParser.Shift_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.shift_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitShift_expression([NotNull] LanguageParser.Shift_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditive_expression([NotNull] LanguageParser.Additive_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.additive_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditive_expression([NotNull] LanguageParser.Additive_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicative_expression([NotNull] LanguageParser.Multiplicative_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.multiplicative_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicative_expression([NotNull] LanguageParser.Multiplicative_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.switch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch_expression([NotNull] LanguageParser.Switch_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.switch_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch_expression([NotNull] LanguageParser.Switch_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.range_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRange_expression([NotNull] LanguageParser.Range_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.range_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRange_expression([NotNull] LanguageParser.Range_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.unary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnary_expression([NotNull] LanguageParser.Unary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.unary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnary_expression([NotNull] LanguageParser.Unary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.cast_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCast_expression([NotNull] LanguageParser.Cast_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.cast_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCast_expression([NotNull] LanguageParser.Cast_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimary_expression([NotNull] LanguageParser.Primary_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.primary_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimary_expression([NotNull] LanguageParser.Primary_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] LanguageParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] LanguageParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>simpleNameExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleNameExpression([NotNull] LanguageParser.SimpleNameExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>simpleNameExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleNameExpression([NotNull] LanguageParser.SimpleNameExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExpressions</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExpressions([NotNull] LanguageParser.ParenthesisExpressionsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExpressions</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExpressions([NotNull] LanguageParser.ParenthesisExpressionsContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>memberAccessExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberAccessExpression([NotNull] LanguageParser.MemberAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>memberAccessExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberAccessExpression([NotNull] LanguageParser.MemberAccessExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalAccessExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralAccessExpression([NotNull] LanguageParser.LiteralAccessExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalAccessExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralAccessExpression([NotNull] LanguageParser.LiteralAccessExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>thisReferenceExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThisReferenceExpression([NotNull] LanguageParser.ThisReferenceExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>thisReferenceExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThisReferenceExpression([NotNull] LanguageParser.ThisReferenceExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>objectCreationExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectCreationExpression([NotNull] LanguageParser.ObjectCreationExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>objectCreationExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectCreationExpression([NotNull] LanguageParser.ObjectCreationExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>tupleExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTupleExpression([NotNull] LanguageParser.TupleExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>tupleExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTupleExpression([NotNull] LanguageParser.TupleExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>typeofExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeofExpression([NotNull] LanguageParser.TypeofExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>typeofExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeofExpression([NotNull] LanguageParser.TypeofExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>anonymousMethodExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnonymousMethodExpression([NotNull] LanguageParser.AnonymousMethodExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>anonymousMethodExpression</c>
	/// labeled alternative in <see cref="LanguageParser.primary_expression_start"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnonymousMethodExpression([NotNull] LanguageParser.AnonymousMethodExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.throwable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrowable_expression([NotNull] LanguageParser.Throwable_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.throwable_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrowable_expression([NotNull] LanguageParser.Throwable_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.throw_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrow_expression([NotNull] LanguageParser.Throw_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.throw_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrow_expression([NotNull] LanguageParser.Throw_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.member_access"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_access([NotNull] LanguageParser.Member_accessContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.member_access"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_access([NotNull] LanguageParser.Member_accessContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.bracket_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBracket_expression([NotNull] LanguageParser.Bracket_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.bracket_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBracket_expression([NotNull] LanguageParser.Bracket_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.indexer_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexer_argument([NotNull] LanguageParser.Indexer_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.indexer_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexer_argument([NotNull] LanguageParser.Indexer_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.predefined_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredefined_type([NotNull] LanguageParser.Predefined_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.predefined_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredefined_type([NotNull] LanguageParser.Predefined_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression_list([NotNull] LanguageParser.Expression_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.expression_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression_list([NotNull] LanguageParser.Expression_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.object_or_collection_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObject_or_collection_initializer([NotNull] LanguageParser.Object_or_collection_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.object_or_collection_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObject_or_collection_initializer([NotNull] LanguageParser.Object_or_collection_initializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.object_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObject_initializer([NotNull] LanguageParser.Object_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.object_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObject_initializer([NotNull] LanguageParser.Object_initializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.member_initializer_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_initializer_list([NotNull] LanguageParser.Member_initializer_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.member_initializer_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_initializer_list([NotNull] LanguageParser.Member_initializer_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.member_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_initializer([NotNull] LanguageParser.Member_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.member_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_initializer([NotNull] LanguageParser.Member_initializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.initializer_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitializer_value([NotNull] LanguageParser.Initializer_valueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.initializer_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitializer_value([NotNull] LanguageParser.Initializer_valueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.collection_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCollection_initializer([NotNull] LanguageParser.Collection_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.collection_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCollection_initializer([NotNull] LanguageParser.Collection_initializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.element_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElement_initializer([NotNull] LanguageParser.Element_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.element_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElement_initializer([NotNull] LanguageParser.Element_initializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.anonymous_object_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnonymous_object_initializer([NotNull] LanguageParser.Anonymous_object_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.anonymous_object_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnonymous_object_initializer([NotNull] LanguageParser.Anonymous_object_initializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.member_declarator_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_declarator_list([NotNull] LanguageParser.Member_declarator_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.member_declarator_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_declarator_list([NotNull] LanguageParser.Member_declarator_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.member_declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember_declarator([NotNull] LanguageParser.Member_declaratorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.member_declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember_declarator([NotNull] LanguageParser.Member_declaratorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.unbound_type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnbound_type_name([NotNull] LanguageParser.Unbound_type_nameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.unbound_type_name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnbound_type_name([NotNull] LanguageParser.Unbound_type_nameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.generic_dimension_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeneric_dimension_specifier([NotNull] LanguageParser.Generic_dimension_specifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.generic_dimension_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeneric_dimension_specifier([NotNull] LanguageParser.Generic_dimension_specifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.lambda_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambda_expression([NotNull] LanguageParser.Lambda_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.lambda_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambda_expression([NotNull] LanguageParser.Lambda_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.anonymous_function_signature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnonymous_function_signature([NotNull] LanguageParser.Anonymous_function_signatureContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.anonymous_function_signature"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnonymous_function_signature([NotNull] LanguageParser.Anonymous_function_signatureContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.explicit_anonymous_function_parameter_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExplicit_anonymous_function_parameter_list([NotNull] LanguageParser.Explicit_anonymous_function_parameter_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.explicit_anonymous_function_parameter_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExplicit_anonymous_function_parameter_list([NotNull] LanguageParser.Explicit_anonymous_function_parameter_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.explicit_anonymous_function_parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExplicit_anonymous_function_parameter([NotNull] LanguageParser.Explicit_anonymous_function_parameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.explicit_anonymous_function_parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExplicit_anonymous_function_parameter([NotNull] LanguageParser.Explicit_anonymous_function_parameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.implicit_anonymous_function_parameter_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImplicit_anonymous_function_parameter_list([NotNull] LanguageParser.Implicit_anonymous_function_parameter_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.implicit_anonymous_function_parameter_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImplicit_anonymous_function_parameter_list([NotNull] LanguageParser.Implicit_anonymous_function_parameter_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.anonymous_function_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAnonymous_function_body([NotNull] LanguageParser.Anonymous_function_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.anonymous_function_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAnonymous_function_body([NotNull] LanguageParser.Anonymous_function_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] LanguageParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] LanguageParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.declarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarationStatement([NotNull] LanguageParser.DeclarationStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.declarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarationStatement([NotNull] LanguageParser.DeclarationStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_function_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocal_function_declaration([NotNull] LanguageParser.Local_function_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_function_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocal_function_declaration([NotNull] LanguageParser.Local_function_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_function_modifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocal_function_modifiers([NotNull] LanguageParser.Local_function_modifiersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_function_modifiers"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocal_function_modifiers([NotNull] LanguageParser.Local_function_modifiersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_function_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocal_function_body([NotNull] LanguageParser.Local_function_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_function_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocal_function_body([NotNull] LanguageParser.Local_function_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.labeled_Statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabeled_Statement([NotNull] LanguageParser.Labeled_StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.labeled_Statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabeled_Statement([NotNull] LanguageParser.Labeled_StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmbedded_statement([NotNull] LanguageParser.Embedded_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmbedded_statement([NotNull] LanguageParser.Embedded_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>theEmptyStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTheEmptyStatement([NotNull] LanguageParser.TheEmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>theEmptyStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTheEmptyStatement([NotNull] LanguageParser.TheEmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] LanguageParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] LanguageParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] LanguageParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] LanguageParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] LanguageParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>forStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] LanguageParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>foreachStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForeachStatement([NotNull] LanguageParser.ForeachStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>foreachStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForeachStatement([NotNull] LanguageParser.ForeachStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>breakStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreakStatement([NotNull] LanguageParser.BreakStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>breakStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreakStatement([NotNull] LanguageParser.BreakStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>continueStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContinueStatement([NotNull] LanguageParser.ContinueStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>continueStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContinueStatement([NotNull] LanguageParser.ContinueStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] LanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] LanguageParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>throwStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterThrowStatement([NotNull] LanguageParser.ThrowStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>throwStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitThrowStatement([NotNull] LanguageParser.ThrowStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>tryStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTryStatement([NotNull] LanguageParser.TryStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>tryStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTryStatement([NotNull] LanguageParser.TryStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>usingStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsingStatement([NotNull] LanguageParser.UsingStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>usingStatement</c>
	/// labeled alternative in <see cref="LanguageParser.simple_embedded_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsingStatement([NotNull] LanguageParser.UsingStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] LanguageParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] LanguageParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_variable_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocal_variable_declaration([NotNull] LanguageParser.Local_variable_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_variable_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocal_variable_declaration([NotNull] LanguageParser.Local_variable_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_variable_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocal_variable_type([NotNull] LanguageParser.Local_variable_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_variable_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocal_variable_type([NotNull] LanguageParser.Local_variable_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_variable_declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocal_variable_declarator([NotNull] LanguageParser.Local_variable_declaratorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_variable_declarator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocal_variable_declarator([NotNull] LanguageParser.Local_variable_declaratorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.local_variable_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocal_variable_initializer([NotNull] LanguageParser.Local_variable_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.local_variable_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocal_variable_initializer([NotNull] LanguageParser.Local_variable_initializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.if_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_body([NotNull] LanguageParser.If_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.if_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_body([NotNull] LanguageParser.If_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement_list([NotNull] LanguageParser.Statement_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.statement_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement_list([NotNull] LanguageParser.Statement_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.for_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_initializer([NotNull] LanguageParser.For_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.for_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_initializer([NotNull] LanguageParser.For_initializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.for_iterator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFor_iterator([NotNull] LanguageParser.For_iteratorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.for_iterator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFor_iterator([NotNull] LanguageParser.For_iteratorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.catch_clauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCatch_clauses([NotNull] LanguageParser.Catch_clausesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.catch_clauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCatch_clauses([NotNull] LanguageParser.Catch_clausesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.specific_catch_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSpecific_catch_clause([NotNull] LanguageParser.Specific_catch_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.specific_catch_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSpecific_catch_clause([NotNull] LanguageParser.Specific_catch_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.general_catch_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGeneral_catch_clause([NotNull] LanguageParser.General_catch_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.general_catch_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGeneral_catch_clause([NotNull] LanguageParser.General_catch_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.finally_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFinally_clause([NotNull] LanguageParser.Finally_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.finally_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFinally_clause([NotNull] LanguageParser.Finally_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.resource_acquisition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResource_acquisition([NotNull] LanguageParser.Resource_acquisitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.resource_acquisition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResource_acquisition([NotNull] LanguageParser.Resource_acquisitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.using_directives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsing_directives([NotNull] LanguageParser.Using_directivesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.using_directives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsing_directives([NotNull] LanguageParser.Using_directivesContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>usingAliasDirective</c>
	/// labeled alternative in <see cref="LanguageParser.using_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsingAliasDirective([NotNull] LanguageParser.UsingAliasDirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>usingAliasDirective</c>
	/// labeled alternative in <see cref="LanguageParser.using_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsingAliasDirective([NotNull] LanguageParser.UsingAliasDirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>usingNamespaceDirective</c>
	/// labeled alternative in <see cref="LanguageParser.using_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsingNamespaceDirective([NotNull] LanguageParser.UsingNamespaceDirectiveContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>usingNamespaceDirective</c>
	/// labeled alternative in <see cref="LanguageParser.using_directive"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsingNamespaceDirective([NotNull] LanguageParser.UsingNamespaceDirectiveContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.qualified_alias_member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQualified_alias_member([NotNull] LanguageParser.Qualified_alias_memberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.qualified_alias_member"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQualified_alias_member([NotNull] LanguageParser.Qualified_alias_memberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_parameter_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_parameter_list([NotNull] LanguageParser.Type_parameter_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_parameter_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_parameter_list([NotNull] LanguageParser.Type_parameter_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_parameter([NotNull] LanguageParser.Type_parameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_parameter([NotNull] LanguageParser.Type_parameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_parameter_constraints_clauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_parameter_constraints_clauses([NotNull] LanguageParser.Type_parameter_constraints_clausesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_parameter_constraints_clauses"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_parameter_constraints_clauses([NotNull] LanguageParser.Type_parameter_constraints_clausesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_parameter_constraints_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_parameter_constraints_clause([NotNull] LanguageParser.Type_parameter_constraints_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_parameter_constraints_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_parameter_constraints_clause([NotNull] LanguageParser.Type_parameter_constraints_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type_parameter_constraints"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_parameter_constraints([NotNull] LanguageParser.Type_parameter_constraintsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type_parameter_constraints"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_parameter_constraints([NotNull] LanguageParser.Type_parameter_constraintsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.primary_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimary_constraint([NotNull] LanguageParser.Primary_constraintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.primary_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimary_constraint([NotNull] LanguageParser.Primary_constraintContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.secondary_constraints"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSecondary_constraints([NotNull] LanguageParser.Secondary_constraintsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.secondary_constraints"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSecondary_constraints([NotNull] LanguageParser.Secondary_constraintsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.constructor_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructor_constraint([NotNull] LanguageParser.Constructor_constraintContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.constructor_constraint"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructor_constraint([NotNull] LanguageParser.Constructor_constraintContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.variable_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable_initializer([NotNull] LanguageParser.Variable_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.variable_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable_initializer([NotNull] LanguageParser.Variable_initializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.return_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturn_type([NotNull] LanguageParser.Return_typeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.return_type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturn_type([NotNull] LanguageParser.Return_typeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.formal_parameter_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormal_parameter_list([NotNull] LanguageParser.Formal_parameter_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.formal_parameter_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormal_parameter_list([NotNull] LanguageParser.Formal_parameter_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.fixed_parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFixed_parameters([NotNull] LanguageParser.Fixed_parametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.fixed_parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFixed_parameters([NotNull] LanguageParser.Fixed_parametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.fixed_parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFixed_parameter([NotNull] LanguageParser.Fixed_parameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.fixed_parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFixed_parameter([NotNull] LanguageParser.Fixed_parameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.rank_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRank_specifier([NotNull] LanguageParser.Rank_specifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.rank_specifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRank_specifier([NotNull] LanguageParser.Rank_specifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.array_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArray_initializer([NotNull] LanguageParser.Array_initializerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.array_initializer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArray_initializer([NotNull] LanguageParser.Array_initializerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attributes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttributes([NotNull] LanguageParser.AttributesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attributes"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttributes([NotNull] LanguageParser.AttributesContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attribute_section"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_section([NotNull] LanguageParser.Attribute_sectionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attribute_section"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_section([NotNull] LanguageParser.Attribute_sectionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attribute_target"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_target([NotNull] LanguageParser.Attribute_targetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attribute_target"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_target([NotNull] LanguageParser.Attribute_targetContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_list([NotNull] LanguageParser.Attribute_listContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attribute_list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_list([NotNull] LanguageParser.Attribute_listContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute([NotNull] LanguageParser.AttributeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attribute"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute([NotNull] LanguageParser.AttributeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.attribute_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute_argument([NotNull] LanguageParser.Attribute_argumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.attribute_argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute_argument([NotNull] LanguageParser.Attribute_argumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.right_arrow"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRight_arrow([NotNull] LanguageParser.Right_arrowContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.right_arrow"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRight_arrow([NotNull] LanguageParser.Right_arrowContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.right_shift"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRight_shift([NotNull] LanguageParser.Right_shiftContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.right_shift"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRight_shift([NotNull] LanguageParser.Right_shiftContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.right_shift_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRight_shift_assignment([NotNull] LanguageParser.Right_shift_assignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.right_shift_assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRight_shift_assignment([NotNull] LanguageParser.Right_shift_assignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] LanguageParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] LanguageParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.boolean_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolean_literal([NotNull] LanguageParser.Boolean_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.boolean_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolean_literal([NotNull] LanguageParser.Boolean_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.string_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString_literal([NotNull] LanguageParser.String_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.string_literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString_literal([NotNull] LanguageParser.String_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.interpolated_regular_string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterpolated_regular_string([NotNull] LanguageParser.Interpolated_regular_stringContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.interpolated_regular_string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterpolated_regular_string([NotNull] LanguageParser.Interpolated_regular_stringContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.interpolated_verbatium_string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterpolated_verbatium_string([NotNull] LanguageParser.Interpolated_verbatium_stringContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.interpolated_verbatium_string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterpolated_verbatium_string([NotNull] LanguageParser.Interpolated_verbatium_stringContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.interpolated_regular_string_part"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterpolated_regular_string_part([NotNull] LanguageParser.Interpolated_regular_string_partContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.interpolated_regular_string_part"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterpolated_regular_string_part([NotNull] LanguageParser.Interpolated_regular_string_partContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.interpolated_verbatium_string_part"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterpolated_verbatium_string_part([NotNull] LanguageParser.Interpolated_verbatium_string_partContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.interpolated_verbatium_string_part"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterpolated_verbatium_string_part([NotNull] LanguageParser.Interpolated_verbatium_string_partContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.interpolated_string_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInterpolated_string_expression([NotNull] LanguageParser.Interpolated_string_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.interpolated_string_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInterpolated_string_expression([NotNull] LanguageParser.Interpolated_string_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword([NotNull] LanguageParser.KeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword([NotNull] LanguageParser.KeywordContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.arg_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArg_declaration([NotNull] LanguageParser.Arg_declarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.arg_declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArg_declaration([NotNull] LanguageParser.Arg_declarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.method_invocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMethod_invocation([NotNull] LanguageParser.Method_invocationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.method_invocation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMethod_invocation([NotNull] LanguageParser.Method_invocationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.object_creation_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObject_creation_expression([NotNull] LanguageParser.Object_creation_expressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.object_creation_expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObject_creation_expression([NotNull] LanguageParser.Object_creation_expressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] LanguageParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] LanguageParser.IdentifierContext context);
}
